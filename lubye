#!/usr/bin/env php
<?php
defined('LUBYE_PATH') or define('LUBYE_PATH', __DIR__);
if (file_exists(LUBYE_PATH.'/../../autoload.php')) {
    require_once LUBYE_PATH.'/../../autoload.php';
} elseif (file_exists(LUBYE_PATH.'/../autoload.php')) {
    require_once LUBYE_PATH.'/../autoload.php';
} else {
    require_once LUBYE_PATH.'/autoload.php';
}

use Lum\Lubye\Bootstrap;
use Lum\Lubye\Env;
use Lum\Lubye\LoadEnv;
use Lum\Lubye\Utils\Config;
use Lum\Lubye\Utils\Constant;
use Lum\Lubye\Utils\Path;
use Lum\Lubye\Utils\Registry;

$longOpts = [
    'plan:',
    'output:',
    'data:',
];
$options = getopt('', $longOpts);
//获取 构建方案名称 参数
$plan = $options['plan'] ?? null;
if (!$plan) {
    //TODO:
}
$output = $options['output'] ?? null;
$dataSource = $options['data'] ?? null;
//载入.env
(new LoadEnv(LUBYE_PATH))->bootstrap();
$resourcePath = Env::get('APP_RESOURCE_PATH');
$path = Path::getInstance(LUBYE_PATH, $resourcePath);
try {
    $plan_config = new Config(sprintf('plan.%s', $plan), $path);
} catch (\Lum\Lubye\Exceptions\LubyeException $e) {
    $plan_config = new Config(sprintf('plan.%s.default', $plan), $path);
}
$registry = Registry::getInstance();
$registry->set(Constant::PLAN_CONFIG_KEY, $plan_config);
//获取 数据源 配置
$db_config = new Config('config.db', $path);
$registry = Registry::getInstance();
$registry->set(Constant::DB_CONFIG_KEY, $db_config);
$builder = new Bootstrap;
$builder->run($output, $dataSource, $path);